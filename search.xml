<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="/2019/12/30/Promise/"/>
      <url>/2019/12/30/Promise/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Promise简介"><a href="#1-Promise简介" class="headerlink" title="1. Promise简介"></a>1. Promise简介</h3><ul><li><strong>Promise是异步编程的一种解决方案</strong></li><li>我们进行<strong>网络请求</strong>时常常会使用到异步请求</li><li>一般情况下，当有异步操作时，我们会使用Promise对这个异步操作进行封装</li></ul><a id="more"></a><h3 id="2-Promise的基本使用"><a href="#2-Promise的基本使用" class="headerlink" title="2. Promise的基本使用"></a>2. Promise的基本使用</h3><ul><li><p><code>new Promise()</code>时要求传入函数作为参数，这个函数本身<strong>包含2个参数resolve和reject</strong></p></li><li><p>而<strong>resolve和reject本身也是函数</strong>，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。</p><ul><li>如果是成功的，那么通常我们会调用<code>resolve(message)</code>，这个时候，我们后续的then会被回调。</li><li>如果是失败的，那么通常我们会调用<code>reject(error)</code>，这个时候，我们后续的catch会被回调。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//异步请求</span></span><br><span class="line">    setTimeout(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//console.log('Hello World');</span></span><br><span class="line">        <span class="comment">//成功的时候调用resolve()，会执行.then</span></span><br><span class="line">        <span class="comment">//拿到数据后要执行的下一步操作就放在 .then(函数作为参数) 中</span></span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//拿到数据后要执行的操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果接下来还有新的异步请求，就需要返回一个新的Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello Vue'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(()=&#123;</span><br><span class="line">            <span class="comment">//成功的时候调用resolve,会执行then</span></span><br><span class="line">            <span class="comment">//resolve('success')</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//失败的时候调用reject,会执行catch</span></span><br><span class="line">            reject(<span class="string">'error message'</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Promise的三种状态"><a href="#3-Promise的三种状态" class="headerlink" title="3. Promise的三种状态"></a>3. Promise的三种状态</h3><ul><li><p>异步操作之后会有三种状态</p><ul><li><p>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p></li><li><p>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p></li><li><p>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><img src="/2019/12/30/Promise/promise.png" class></li></ul><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//resolve('Hello World')</span></span><br><span class="line">        reject(<span class="string">'error'</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这里也可以只调用then，不调用catch</span></span><br><span class="line"><span class="comment">//then(函数参数1，函数参数2)</span></span><br><span class="line"><span class="comment">//处于fulfill状态时，执行函数参数1中的操作；处于reject状态时，执行函数参数2中的操作</span></span><br><span class="line">.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, (error)=&gt;&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Promise的then和catch的对比</p><p>这两段代码片段是否相等？换句话说，对于任何处理函数在任何情况下，它们的行为方式是否相同？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(f1).catch(f2);</span><br></pre></td></tr></table></figure><p>对比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(f1, f2);</span><br></pre></td></tr></table></figure></li></ul><p>  答案就是：它们<strong>不相等</strong>：</p><p>  不同之处在于如果 <code>f1</code> 中出现错误，它会在 <code>.catch</code> 中被处理：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(f1)</span><br><span class="line">  .catch(f2);</span><br></pre></td></tr></table></figure><p>  …而这里不是：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(f1, f2);</span><br></pre></td></tr></table></figure><p>  那是因为错误是沿着链传递的，而在第二个代码段中，<code>f1</code> 下面并没有链。</p><p>  换句话说，<code>.then</code> 将 results/errors 传递给下一个 <code>.then/catch</code>。所以在第一个例子中，下面有一个 <code>catch</code> ，而在第二个例子中 —— 并没有 <code>catch</code>，所以错误未处理。</p><h3 id="4-Promise-API"><a href="#4-Promise-API" class="headerlink" title="4. Promise API"></a>4. Promise API</h3><h5 id="1-Promise-resolve-value-和-Promise-reject-error"><a href="#1-Promise-resolve-value-和-Promise-reject-error" class="headerlink" title="(1) Promise.resolve(value)  和 Promise.reject(error)"></a>(1) <code>Promise.resolve(value)</code>  和 <code>Promise.reject(error)</code></h5><ul><li><p>使用Promise时，无论是then还是catch都可以返回一个Promise对象。</p></li><li><p>当我们需要使用Promise对象对数据进行一些异步操作，但又不需要再次进行异步请求时，我们可以直接使用<code>Promise.resolve(value)</code>以及<code>Promise.reject(error)</code></p><ul><li><p><code>Promise.resovle(value)</code>：将数据包装成Promise对象，并且在内部回调resolve()函数</p></li><li><p><code>Promise.reject(error)</code>：将数据包装成Promise对象，并且在内部回调reject()函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(value)</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value) )</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(error)</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(error) )</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'Hello World'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//Hello World</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(dada + <span class="string">'111'</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//Hello World111</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(data + <span class="string">'error'</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//这里没有输出，这部分代码不会执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(dada + <span class="string">'222'</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">//Hello World111error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data + <span class="string">'333'</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//Hello World111error333</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.resolve(value)</code>的简写</p><p>如果我们希望数据直接包装成<code>Promise.resolve(value)</code>，那么在then中可以直接返回数据</p><p><code>return Promise.resovle(data)</code>可以直接简写为<code>return data</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'Hello World'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//Hello World</span></span><br><span class="line">    <span class="keyword">return</span> dada + <span class="string">'111'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//Hello World111</span></span><br><span class="line">    <span class="keyword">return</span> dada + <span class="string">'222'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-Promise-all"><a href="#2-Promise-all" class="headerlink" title="(2) Promise.all()"></a>(2) <code>Promise.all()</code></h5><p>假设我想要并行执行多个 promise，并等待所有 promise 准备就绪。</p><p>例如，并行下载几个 URL 并等到所有内容都下载完毕后才开始处理它们。</p><p>这就是 <code>Promise.all</code> 的用途：</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.all([...promises...]);</span><br></pre></td></tr></table></figure><p>它需要一个 promise 的数组作为其参数（严格来说可以是任何可迭代对象，但通常都是数组）<strong>并返回一个新的 promise</strong>。</p><p>当所有给定的 promise 都被处理并<strong>以数组的形式</strong>呈现其结果时，新的 promise 也就被 resolve。</p><p>例如，下面的 <code>Promise.all</code> 在 3 秒之后被处理，然后它的结果就是一个 <code>[1, 2, 3]</code> 数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">1</span>), <span class="number">3000</span>)), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">2</span>), <span class="number">2000</span>)), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">3</span>), <span class="number">1000</span>))  <span class="comment">// 3</span></span><br><span class="line">]).then(alert); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><p>请注意，它们的相对顺序是相同的。即使第一个 promise 需要很长的时间来 resolve，但它仍然是结果数组中的第一个。</p><p><strong>如果任意一个 promise 为 reject，<code>Promise.all</code> 返回的 promise 就会立即 reject 这个错误。</strong></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">1</span>), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Whoops!"</span>)), <span class="number">2000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line">]).catch(alert); <span class="comment">// Error: Whoops!</span></span><br></pre></td></tr></table></figure><p>这里的第二个 promise 在两秒内被 reject。这立即导致了对 <code>Promise.all</code> 的 reject。因此 <code>.catch</code> 被执行：reject 的错误成为整个 <code>Promise.all</code> 的结果。</p><p><strong>如果出现错误，其他 promise 就会被忽略</strong></p><p>如果其中一个 promise 被 reject，<code>Promise.all</code> 就会立即被 reject 并忽略所有列表中其他的 promise。它们的结果也被忽略。</p><p><strong><code>Promise.all(iterable)</code> 允许“迭代”中的非 promise（non-promise）的 “常规” 值</strong></p><p>通常，<code>Promise.all(...)</code> 接受可迭代的 promise 集合（大部分情况下是数组）。但是如果这些对象中的任意一个不是 promise，它将会被直接包装进 <code>Promise.resolve</code>。</p><p>例如，这里的结果是 <code>[1, 2, 3]</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">1</span>), <span class="number">1000</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="number">2</span>, <span class="comment">// 视为 Promise.resolve(2)</span></span><br><span class="line">  <span class="number">3</span>  <span class="comment">// 视为 Promise.resolve(3)</span></span><br><span class="line">]).then(alert); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure><p>所以我们可以很方便的将准备好的值传递给 <code>Promise.all</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http系列01</title>
      <link href="/2019/12/17/http%E7%B3%BB%E5%88%9701/"/>
      <url>/2019/12/17/http%E7%B3%BB%E5%88%9701/</url>
      
        <content type="html"><![CDATA[<h3 id="1-浏览器背后的故事"><a href="#1-浏览器背后的故事" class="headerlink" title="1. 浏览器背后的故事"></a>1. 浏览器背后的故事</h3><p>​    用户在浏览器中输入URL地址，浏览器根据URL向 DNS（域名系统）服务器发送请求，DNS服务器根据域名查询到对应的IP地址并返回给浏览器，浏览器根据得到的IP地址向web服务器发起请求，请求相应的数据，web服务器返回给浏览器所请求的数据(如：HTML/CSS/JS 等)，浏览器将这些数据进行渲染后，显示给用户看。</p><a id="more"></a><p>​    过程如下图所示：</p><p>​    <img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/brower%E6%B8%B2%E6%9F%93.png" class></p><hr><h3 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h3><ul><li>HTTP协议的概念<ul><li>超文本传输协议（HTTP）是一种<strong>通信协议</strong>，它允许将超文本标记语言（HTML）文档从Web服务器传送到客户端的浏览器</li><li>HTTP是一个属于<strong>应用层的面向对象的协议</strong>，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展</li></ul></li><li>Web与HTTP<ul><li>Web是一种基于超文本和HTTP的，全球性的，动态交互的，跨平台的分布式<strong>图形信息系统</strong></li><li>是建立在Internet上的一种<strong>网络服务</strong>，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超链接将Internet上的信息节点组织成一个互为关联的网状结构</li></ul></li></ul><hr><h3 id="3-HTTP数据传输过程"><a href="#3-HTTP数据传输过程" class="headerlink" title="3. HTTP数据传输过程"></a>3. HTTP数据传输过程</h3><ul><li><p><strong>发送端</strong>发送数据时，数据会<strong>从上层传输到下层</strong>，且每经过一层都会被<strong>加上该层的头部信息</strong></p></li><li><p><strong>接收端</strong>接收数据时，数据会<strong>从下层传输到上层</strong>，且<strong>传输前</strong>会<strong>把下层的头部信息删除</strong></p></li><li><p>具体如下图所示：</p><img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/TCP-IP%E6%95%B0%E6%8D%AE%E6%B5%81.png" class></li></ul><hr><h3 id="4-传输层——TCP的三次握手"><a href="#4-传输层——TCP的三次握手" class="headerlink" title="4. 传输层——TCP的三次握手"></a>4. 传输层——TCP的三次握手</h3><ul><li><p>使用TCP协议进行通信的双方<strong>必须先建立连接</strong>，然后才能开始传输数据</p></li><li><p>为了确保连接双方的可靠性，在双方建立连接时，TCP协议采用了<strong>三次握手</strong>策略：</p></li><li><p>如下图所示：</p><img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" class></li></ul><p>  （为什么要进行三次握手：为了确认客户端与服务端通信双方的接收能力与发送能力都是正常的，防止开启一些无用的连接）</p><ul><li><p>第一次握手：客户端发送带有SYN标志的连接请求报文段，然后进入SYN_SEND状态，等待服务端的确认</p><p>(服务端确认了自己可以接收数据)</p></li><li><p>第二次握手：服务端接收到客户端的SYN报文段后，需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述信息放到一个报文段（SYN+ACK报文段）中，一并发送给客户端，此时服务器端将会进入SYN_RECV状态（创建连接，server开启tcp的socket的端口）</p><p>（客户端确认了自己可以发送和接收数据）</p></li><li><p>第三次握手：客户端接收到服务端的SYN+ACK报文段后，会向服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态，完成TCP的三次握手</p><p>（服务端确认了自己可以发送数据）</p></li><li><p>如下图所示：</p><img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B2.png" class></li></ul><hr><h3 id="4-DNS域名解析"><a href="#4-DNS域名解析" class="headerlink" title="4. DNS域名解析"></a>4. DNS域名解析</h3><ul><li><p>通常我们访问一个网站是通过主机名或域名来进行访问的。因为相对于IP地址，域名更容易让人记住</p></li><li><p>但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址</p></li><li><p><strong>DNS</strong>服务就是用来解决这个问题的，它提供<strong>域名到IP地址之间的解析服务</strong></p><img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.png" class></li></ul><ul><li>本地电脑会将我们经常使用的域名和其对应的IP地址建立一个<strong>映射关系</strong>，并保存到系统文件中。进行数据请求时，系统会优先到<strong>host文件</strong>中寻找是否缓存了对应域名的IP地址。如果本地没有缓存，则系统会求助于<strong>本地的DNS服务器</strong>，去请求域名对应的IP地址。如果本地的DNS服务器没有找到，则本地的DNS服务器首先会选择在<strong>TCP/IP参数中设置的首选DNS服务器</strong>（可能和本地DNS服务器相同）发送请求，然后<strong>一层一层</strong>的向上一级的DNS服务器发送请求（最多到<strong>DNS根服务器</strong>）（如果设置了转发的话）（如果没设置转发，就直接向13台根DNS服务器发送请求），直到找到所请求域名对应的IP地址。（返回IP地址时也是一层一层返回的）</li></ul><hr><h3 id="5-HTTP完整事务处理过程"><a href="#5-HTTP完整事务处理过程" class="headerlink" title="5. HTTP完整事务处理过程"></a>5. HTTP完整事务处理过程</h3><img src="/2019/12/17/http%E7%B3%BB%E5%88%9701/HTTP%E5%AE%8C%E6%95%B4%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B.jpg" class><p><img src="http%E7%B3%BB%E5%88%9701/brower%E6%B8%B2%E6%9F%93.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/17/hello-world/"/>
      <url>/2019/12/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
